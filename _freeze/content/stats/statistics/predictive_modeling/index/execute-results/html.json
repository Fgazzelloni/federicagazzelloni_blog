{
  "hash": "3330257aa5dddf3ba6c96f804119fef1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predictive modeling\"\nexcerpt: \"TidyModels vs Caret\"\nimage: featured.png\ndate: 2022-06-05\ndraft: false\nimages:\nseries:\ncategories: modeling\nlayout: single\nexecute: \n  eval: true\n---\n\n## Overview\n\nThis post is dedicated to make a comparison between **Caret** and **TidyModels** R packages. Data modeling with R pass through data preprocessing and parameters assessments to predicting an outcome. Both set of packages can be used to acheive same results, with the purpose of finding the best predictive performance for data specifc models.\n\nThe **Caret** package is the starting point for understanding how to manage models and produce unbiases predictions with R. As well as **TidyModels** meta package, it gives the opportunity to contruct a multivariate model syntax to manage several models to be applied on same set of data. **TidyModels** allows the use of a set of concatenated functions in partership with the **TidyVerse** grammar to build a structural model base which blends different models as one global model.\n\nThe following is an attempt to a comparison between the two predictive model structures.\n\n------------------------------------------------------------------------\n\n## Caret package\n\nThe most important functions for this package, grouped by steps to modeling, are:\n\n1.  Preprocessing (data cleaning/wrangling)\n\n    -   preProcess()\n\n2.  Data splitting and resampling\n\n    -   createDataPartition()\n\n    ```{=html}\n    <!-- -->\n    ```\n    -    createResample()\n\n    -   createTimeSlices()\n\n3.  Model fit and prediction\n\n    -   train()\n\n    ```{=html}\n    <!-- -->\n    ```\n    -   predict()\n\n4.  Model comparison\n\n    -   confusionMatrix()\n\n------------------------------------------------------------------------\n\n# TidyModels meta package\n\nThis [\"meta package\"](https://tidymodels.tidymodels.org/) is made of a set of packages for modeling, with the support of other well known packages for data manipulation and visualization such as broom, dplyr, ggplot2, purrr, infer, modeldata, and tibble; it includes:\n\n-   recipes (a preprocessor)\n-   rsample (for resampling)\n-   parsnip (model syntax)\n-   tune and dials (optimization of hyperparameters)\n-   workflows and workflowsets (combine pre-processing steps and models)\n-   yardstick (for evaluating models)\n\nThe most important functions for this meta package, grouped by steps to modeling, are:\n\n1.  Preprocessing (data cleaning/wrangling)\n\n    -   recipes::recipe()\n\n    -   recipes::step\\_<functions>()\n\n2.  Data splitting and resampling\n\n    -   rsample::initial_split()\n\n    -   rsample::training()\n\n    -   rsample::testing()\n\n    -   rsample::bootstraps()\n\n    -   rsample::vfold_cv()\n\n    -    tune::control_resamples()\n\n3.  Model fit and prediction\n\n    -   parsnip::<model_type>() %\\>% set_mode() %\\>% set_engine()\n\n    -   parsnip::extract_fit_engine()\n\n    -   parsnip::extract_fit_parsnip()\n\n    -   parsnip::fit() stats::predict()\n\n    -   tune::fit_resamples()\n\n4.  Model workflow\n\n    -   workflows::workflow() %\\>% add_model()\n\n    -   workflows::add_formula()\n\n    -   workflows::add_recipe()\n\n    -   parsnip::fit()\n\n    -   stats::predict()\n\n    -   workflows::update_formula()\n\n    -   workflows::add_variables() / remove_variables()\n\n    -   workflowsets::workflow_set()\n\n    -   workflowsets::workflow_map()\n\n    -   workflowsets/tune::extract_workflow() / extract_recipe() / extract_fit_parsnip()\n\n    -   tune::last_fit()\n\n    -   workflowsets/tune::collect_metrics()\n\n    -   workflowsets/tune::collect_predictions()\n\n5.  Model comparison\n\n    -   yardstick::conf_mat()\n\n    -   yardstick::accuracy()\n\n    -   yardstick::metric_set()\n\n    -   yardstick::roc_curve()\n\n    -   yardstick::roc_auc()\n\n    -   yardstick::sensitivity()\n\n------------------------------------------------------------------------\n\n## Machine learning algorithms in R\n\n-   Linear discriminant analysis\n-   Regression\n-   Naive Bayes\n-   Support vector machines\n-   Classification and regression trees\n-   Random forests\n-   Boosting\n-   etc.\n\nResource: [Practical Machine Learning](https://github.com/DataScienceSpecialization/courses/tree/master/08_PracticalMachineLearning)\n\n------------------------------------------------------------------------\n\n## Caret or TidyModels?\n\n[Caret](http://caret.r-forge.r-project.org/) [Tidymodels](https://www.tidymodels.org/start/models/)\n\n------------------------------------------------------------------------\n\n## Caret Example with SPAM Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret); library(kernlab); data(spam)\ninTrain <- createDataPartition(y=spam$type,\n                              p=0.75, list=FALSE)\ntraining <- spam[inTrain,]\ntesting <- spam[-inTrain,]\n# dim(training)\n\nset.seed(32343)\nmodelFit <- train(type ~.,data=training, method=\"glm\")\n# modelFit\n\npredictions <- predict(modelFit,newdata=testing)\n# predictions\n\ncm <- confusionMatrix(predictions,testing$type)\ncm\n\nplot(cm$table,main=\"Table\")\n```\n:::\n\n\n## TidyModels Example with SPAM Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ntidymodels_prefer()\nset.seed(123)\nsplit <- initial_split(spam,0.75,strata=type)\ntraining <- training(split)\ntesting <- testing(split)\n\nmodelFit <- logistic_reg() %>% \n  set_engine(\"glm\") %>%\n  fit(type~.,data=spam)\n\n# tidy(modelFit)\n\npredictions <- predict(modelFit,new_data=testing)\n# predictions\n\ntesting$pred <- predictions$.pred_class\ncm <- yardstick::conf_mat(data = testing, truth = type, estimate = pred)\ncm\nautoplot(cm)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}