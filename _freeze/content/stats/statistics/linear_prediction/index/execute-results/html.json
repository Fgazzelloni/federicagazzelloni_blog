{
  "hash": "2c7c363e3cfa17b8364335f779efc1e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How does geom_smooth() make predictions\"\ndate: '2024-02-26'\nimage: featured.png\nslug: model prediction\ncategories:\n  - rstats\n  - modeling\n  - linear regression\n  - geom_smooth\nsummary: \"William Farr's Data on Cholera in London, 1849 is used to digg into a linear model output and compared with that made by geom_smooth(method='lm')\"\nexecute: \n  eval: true\n---\n\n\n\n\n## Overview\n\n::: columns\n::: {.column width=\"80%\"}\n**Linear regression** is a statistical technique used to represent the linear relationship between a response $(y)$ and a predictor $(x)$.\n\n$$\ny= \\beta_0 + \\beta_1x\n$$\n:::\n\n::: {.column width=\"20%\"}\n<center>![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMTIzNW90ZGV3dnJhMTc3czF6MWtxOWlmZDd1bzM0ZDl2NmxjOTk3byZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/1WozRHfDOlVZqVjhlf/giphy.gif)</center>\n:::\n:::\n\nBelow we examine some mismatch in output when plotting the prediction results of a linear model made with the `lm()` and the `predict()` functions versus the output produced by the `geom_smooth()` layer in a `ggplot()` visualization.\n\nThe first dataset used is from the `{HistData}` package `HistData::CholeraDeaths1849`. We select just the deaths due to Cholera within 12 months in 1849, and visualize the trend in time of the number of deaths with the addition of a further layer made with the `geom_smooth()`.\n\n```         \n?geom_smooth()\n\n?HistData::CholeraDeaths1849\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(HistData)\ncholera <- HistData::CholeraDeaths1849 %>%\n  filter(cause_of_death==\"Cholera\")%>%\n  select(date,deaths)\n  \ncholera %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 2\n  date       deaths\n  <date>      <dbl>\n1 1849-01-01     13\n2 1849-01-02     19\n3 1849-01-03     28\n4 1849-01-04     24\n5 1849-01-05     23\n6 1849-01-06     39\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cholera)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      date                deaths    \n Min.   :1849-01-01   Min.   :   0  \n 1st Qu.:1849-04-02   1st Qu.:   8  \n Median :1849-07-02   Median :  23  \n Mean   :1849-07-02   Mean   : 146  \n 3rd Qu.:1849-10-01   3rd Qu.: 192  \n Max.   :1849-12-31   Max.   :1121  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera,aes(x=date,y=deaths))+\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(title=\"Deaths due to Cholera in London (1849)\",\n       x=\"Date\",y=\"Cholera death\")+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Deaths due to Cholera in London (1849)](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nThe purpose of making a model is that to identify the inside pattern of a series of observations. This means that the model would need to be able to interpolate given observations in order to represent the overall pattern. As in the visualization above the `geom_smooth()` with the specification of the `method=\"lm\"` helps us visualize what the direction of a linear pattern would be on this data. If it is a growing pattern or not.\n\nClearly the points are shaping a bell distribution of deaths in time, and this is not the case of a linear relationship between date and cholera deaths, but we would like to dig into the output of the prediction of the application of a linear model on this data and then compare it with the output of the `geom_smooth(method=\"lm\")` line.\n\nLet's apply a linear model to this data and make some rough predictions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(deaths ~ date, data = cholera)\nsummary(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = deaths ~ date, data = cholera)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-265.88 -104.28  -59.87   11.19  930.92 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 2.954e+04  4.878e+03   6.056 3.49e-09 ***\ndate        6.678e-01  1.108e-01   6.026 4.13e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 223.1 on 363 degrees of freedom\nMultiple R-squared:  0.09094,\tAdjusted R-squared:  0.08843 \nF-statistic: 36.31 on 1 and 363 DF,  p-value: 4.132e-09\n```\n\n\n:::\n:::\n\n\n\n\nThe application of a linear model on this data produced an estimation of the intercept $(\\beta_0)$ and the slope $(\\beta_1)$.\n\n$$\n\\beta_0=29540 \\text{ and } \\beta_1=0.6678\n$$ The intercept is the starting point of a linear model line on the y axes, while the slope is the inclination of the line, that can be positive or negative, indicating the growing or decreasing tendency of the relationship between the response and the predictor.\n\nLet's draw this line.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera, aes(x=date, y=deaths)) + \n    geom_point() + \n    geom_abline(slope=0.6678, intercept=29540,\n                col=\"pink\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\nNow calculate the prediction and the **Root Mean Squared Error (RMSE)** to evaluate how the model worked.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- predict(mod, newdata = NULL)\n\nrmse <- sqrt(mean((predictions - cholera$deaths)^2))\ncat(\"Root Mean Squared Error (RMSE):\", rmse, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRoot Mean Squared Error (RMSE): 222.4774 \n```\n\n\n:::\n:::\n\n\n\n\n::: callout\nWhat if we want to visualize the output of our prediction?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera, aes(x=date)) + \n  geom_point(aes(y=deaths)) + \n  geom_smooth(aes(y=deaths),method = \"lm\",linewidth=2)+\n  geom_line(y=predictions, col=\"red\")+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nNow let's use a different dataset. This data set comes from a paper by Brigham et al. (2003) that analyses some tables from Farr's report of the Registrar-General on mortality due to cholera in England in the years 1848-1849, during which there was a large epidemic throughout the country. In this case we do not have the time variable but the numbers of deaths are considered by 38 districts in London.\n\n```         \n?HistData::Cholera\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncholera2 <- HistData::Cholera %>%\n  rownames_to_column(var=\"id\")%>%\n  select(id,district,cholera_deaths,popn)\n  \ncholera2 %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id            district cholera_deaths  popn\n1  1           Newington            907 63074\n2  2         Rotherhithe            352 17208\n3  3          Bermondsey            836 50900\n4  4 St George Southwark            734 45500\n5  5            St Olave            349 19278\n6  6          St Saviour            539 35227\n```\n\n\n:::\n:::\n\n\n\n\nThe predictor in this case is a character, we are considering the relationship between the deaths rate and the districts, so we are looking at to see whether the deaths rate is different among 38 districts. The order in this case is arbitrary and this influences the pattern. The `geom_smooth()` is not drowning a line, it doesn't know how the x-axis has to be ordered, because there is not a specified order to follow.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera2, aes(x=id,y=cholera_deaths)) + \n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nwhile if we set an order with `as.integer(id)`, the line can be drawn but it hasn't got much meaning. The trend is not going up or down because we are considering `districts` in the x-axis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera2, aes(x=as.integer(id),y=cholera_deaths)) + \n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nIf we consider the population, in the middle of 1849, a numeric vector, these values are by districts, each `popn` value corresponds to the level of population in one of the 38 districts. Let's see what happens if we plot `popn` versus `cholera_deaths`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera2, aes(x=popn,y=cholera_deaths)) + \n  geom_point()+\n  geom_smooth(method=\"lm\")+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nNow the values on the x-axis are numeric and have a meaning to be ordered from the lower to the highest but `it is not a trend`. Each point is one district population value with some deaths due to cholera. The `geom_smooth` line it is telling us that if the level of the population is higher, the level of deaths due to cholera is higher, than in other location with a lower level of population.\n\nBut we can evaluate the growing relationship between population level and numbers of deaths due to cholera.\n\nLet's make a linear model and predict the future, roughly.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2 <- lm(cholera_deaths ~ popn , data = cholera2)\nmod2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = cholera_deaths ~ popn, data = cholera2)\n\nCoefficients:\n(Intercept)         popn  \n  1.073e+02    4.357e-03  \n```\n\n\n:::\n:::\n\n\n\n\nLet's draw this line.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera2, aes(x=popn, y=cholera_deaths)) + \n    geom_point() + \n    geom_abline(slope=0.004357, intercept=107.3,\n                col=\"pink\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions2 <- predict(mod2, newdata = NULL)\n\nrmse <- sqrt(mean((predictions2 - cholera2$cholera_deaths)^2))\ncat(\"Root Mean Squared Error (RMSE):\", rmse, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRoot Mean Squared Error (RMSE): 281.7808 \n```\n\n\n:::\n:::\n\n\n\n\n::: callout\nWhat if we want to visualize the output of our prediction?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggplot(cholera2, aes(x=popn)) + \n  geom_point(aes(y=cholera_deaths)) + \n  geom_smooth(aes(y=cholera_deaths),method = \"lm\",linewidth=2)+\n  geom_line(y=predictions2, col=\"red\")+\n  labs(title=\"Cholera Deaths explanined by\\nLondon Districts Population (1849)\",\n       x=\"1849 London Population by 38 Districts\",\n       y=\"Cholera Deaths\",\n       caption=\"William Farr's Data on Cholera in London, 1849\")+\n  theme_minimal()\nplot\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Cholera Deaths explanined by London Districts Population (1849)](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n> Think about that!\n\n<center>![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExcGJqZGFycDB0bGp4YzlhMGNiMjE3YXl0eXA4NWRmejFzNW1ha2NlNiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/l3q2Cy90VMhfoA9BC/giphy.gif)</center>\n\n<br>\n\nImagine that we absolutely want to replicate the `geom_smooth(method=\"lm\")` line, we would need to consider some steps that the function takes in order to plot the prediction line that doesn't much with ours this time. First think to consider is that we haven't used `new data` but just produced the prediction from our dataset. But this is exactly as the same as before.\n\nThere is a function `ggplot_build()` that let's us dig into the ggplot data manipulation used to make the geom_smooth line.\n\n```         \n?ggplot_build()\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# source: https://stackoverflow.com/questions/42673665/geom-smooth-gives-different-fit-than-nls-alone\ndat = ggplot_build(plot)$data[[2]]\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n```{.r .cell-code}\ndat <- dat%>%rename(cholera_drate=y,popn=x)\n```\n:::\n\n\n\n\nThis time we use the `newdata = dat` insted of `NULL`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions3 <- predict(mod2, newdata = dat)\n\nrmse <- sqrt(mean((predictions3 - cholera2$cholera_deaths)^2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in predictions3 - cholera2$cholera_deaths: longer object length is not\na multiple of shorter object length\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Root Mean Squared Error (RMSE):\", rmse, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRoot Mean Squared Error (RMSE): 411.1835 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cholera2, aes(x=popn)) + \n  geom_point(aes(y=cholera_deaths)) + \n  geom_smooth(aes(y=cholera_deaths),method = \"lm\",linewidth=2)+\n  geom_line(data=dat,y=predictions3, col=\"red\")+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\nWe eventually matched the geom_smooth line, but why did our predictions on the original data result in that squiggly line?\n\n------------------------------------------------------------------------\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}