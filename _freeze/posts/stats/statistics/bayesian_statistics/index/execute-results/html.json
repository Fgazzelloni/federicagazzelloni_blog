{
  "hash": "7dfd256b2f772f88589ac3a72b911289",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bayesian Statistics model comparison\"\ndate: '2023-03-22'\nimage: featured.png\nslug: bayesian-statistics\ncategories:\n  - rstats\n  - modeling\n  - bayesian\nsummary: \"Looking at bayesian model comparisons\"\nexecute: \n  eval: true\n---\n\n\n# Overview\n\n::: columns\n::: {.column width=\"60%\"}\nIn this post I'll go through some differences between *Bayesian statistical packages* in R. Bayesian statistics involves probabilities. This means that the probability of an event to occur is considered in the modeling procedure, and is mainly used in for making **inferences**, and can be used for an analysis of the speculation of the root cause of a phenomenon under the term of **causal inference**.\n:::\n\n::: {.column width=\"40%\"}\n![](featured.png){width=\"400px\"}\n:::\n:::\n\nIn more details, when Bayesian statistics is performed, the response variable is tested against (causal) predictors with the application of suited **prior** distributions, and the use of the **likelihood function**, to finally produce a **posterior** distribution which should be as much as possible close to the real future outcome of the response variable distribution.\n\nThe **prior distribution** is the starting point; it is the probability distribution on which the future outcome is linked to, such as the probability to have a *Girl* given the probability to have had a *Boy*.\n\n$$P( \\text{ Girl } | \\text{ Boy })$$\n\nThe probability to have had a *Boy* is the **prior**, while the conditional probability to have a *Girl* is the posterior.\n\nBriefly, here is a comparison between different R packages that use *Bayesian inference* for the calculation of the model probability distribution of the *posterior*.\n\nThe **Stan** model engine, for model replication and prediction is used in conjunction with the **Montecarlo simulation** technique for the best model solution. The *Stan* model engine is applied in the following packages:\n\n-   brms\n-   rstanarm\n-   rethinking\n-   MCMCglmm\n\nAll of these packages adapt and adjust different model options for a modeling procedure which is the result of the best combination of efficiency to increase productivity and effectiveness, to identify and remove unnecessary steps, automate repetitive tasks, and utilize the most suitable software tools.\n\nThis is the original source code that I have updated: <https://www.jstatsoft.org/article/view/v080i01>\n\n> A wide range of distributions and link functions are supported, allowing users to fit - among others - linear, robust linear, binomial, Poisson, survival, ordinal, zero-inflated, hurdle, and even non-linear models all in a multilevel context. (The Brms package)\n\nLoading required packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"brms\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Rcpp\nLoading 'brms' package (version 2.20.4). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n\nAttaching package: 'brms'\n\nThe following object is masked from 'package:stats':\n\n    ar\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"rstanarm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThis is rstanarm version 2.26.1\n- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!\n- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.\n- For execution on a local, multicore CPU with excess RAM we recommend calling\n  options(mc.cores = parallel::detectCores())\n\nAttaching package: 'rstanarm'\n\nThe following objects are masked from 'package:brms':\n\n    dirichlet, exponential, get_y, lasso, ngrps\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"rethinking\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: rstan\nLoading required package: StanHeaders\n\nrstan version 2.32.3 (Stan version 2.26.1)\n\nFor execution on a local, multicore CPU with excess RAM we recommend calling\noptions(mc.cores = parallel::detectCores()).\nTo avoid recompilation of unchanged Stan programs, we recommend calling\nrstan_options(auto_write = TRUE)\nFor within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,\nchange `threads_per_chain` option:\nrstan_options(threads_per_chain = 1)\n\n\nAttaching package: 'rstan'\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nLoading required package: cmdstanr\nThis is cmdstanr version 0.5.3\n- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr\n- CmdStan path: /Users/macintoshhd/.cmdstan/cmdstan-2.31.0\n- CmdStan version: 2.31.0\nLoading required package: parallel\nrethinking (Version 2.31)\n\nAttaching package: 'rethinking'\n\nThe following object is masked from 'package:rstan':\n\n    stan\n\nThe following objects are masked from 'package:rstanarm':\n\n    logit, se\n\nThe following objects are masked from 'package:brms':\n\n    LOO, stancode, WAIC\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nThe following object is masked from 'package:stats':\n\n    rstudent\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"MCMCglmm\")  \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\nLoading required package: coda\n\nAttaching package: 'coda'\n\nThe following object is masked from 'package:rstan':\n\n    traceplot\n\nLoading required package: ape\n\nAttaching package: 'ape'\n\nThe following object is masked from 'package:dplyr':\n\n    where\n\n\nAttaching package: 'MCMCglmm'\n\nThe following object is masked from 'package:brms':\n\n    me\n```\n\n\n:::\n:::\n\n\nHelper function to better compute the effective sample size\n\n\n::: {.cell}\n\n```{.r .cell-code}\neff_size <- function(x) {\n  if (is(x, \"brmsfit\")) {\n    samples <- as.data.frame(x$fit)\n  } else if (is(x, \"stanreg\")) {\n    samples <- as.data.frame(x$stanfit)\n  } else if (is(x, \"ulam\")) {\n    samples <- as.data.frame(x@stanfit)\n  } else if (is(x, \"stanfit\")) {\n    samples <- as.data.frame(x)\n  } else if (is(x, \"MCMCglmm\")) {\n    samples <- cbind(x$Sol, x$VCV)\n  } else {\n    stop(\"invalid input\")\n  }\n  # call an internal function of rstan\n  floor(apply(samples, MARGIN = 2, FUN = rstan:::ess_rfun))\n}\n```\n:::\n\n\n### Compare efficiency between packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# only used for Stan packages\niter <- 6000  \nwarmup <- 1000\nchains <- 1\nadapt_delta <- 0.8\n\n# only used for MCMCglmm\nnitt <- 35000  \nburnin <- 10000\nthin <- 5\n# leads to 5000 posterior samples\n```\n:::\n\n\n## Dyestuff\n\n### brms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprior_dye_brms <- c(set_prior(\"normal(0, 2000)\", class = \"Intercept\"),\n                    set_prior(\"cauchy(0, 50)\", class = \"sd\"),\n                    set_prior(\"cauchy(0, 50)\", class = \"sigma\"))\n\ndye_brms <- brm(Yield ~ 1 + (1 | Batch), \n                data = lme4::Dyestuff, \n                prior = prior_dye_brms, \n                chains = 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCompiling Stan program...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTrying to compile a simple C file\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nclang -mmacosx-version-min=10.13 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.2/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/usr/local/include   -fPIC  -Wall -g -O2  -c foo.c -o foo.o\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:88:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:1: error: unknown type name 'namespace'\nnamespace Eigen {\n^\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:628:16: error: expected ';' after top level declarator\nnamespace Eigen {\n               ^\n               ;\nIn file included from <built-in>:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22:\nIn file included from /Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Dense:1:\n/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include/Eigen/Core:96:10: fatal error: 'complex' file not found\n#include <complex>\n         ^~~~~~~~~\n3 errors generated.\nmake: *** [foo.o] Error 1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStart sampling\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nthe number of chains is less than 1; sampling not done\n```\n\n\n:::\n\n```{.r .cell-code}\ntime_dye_brms <- system.time(capture.output(\n  dye_brms <- update(dye_brms, \n                     iter = iter, \n                     warmup = warmup, \n                     chains = chains,\n                     control = list(adapt_delta = adapt_delta))\n))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStart sampling\n```\n\n\n:::\n\n```{.r .cell-code}\n# summary(dye_brms)\neff_dye_brms <- min(eff_size(dye_brms)) / time_dye_brms[[1]]\n```\n:::\n\n\n### rstanarm\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_dye_rstanarm <- system.time(capture.output(\n  dye_rstanarm <- stan_glmer(Yield ~ 1 + (1 | Batch), data = lme4::Dyestuff,\n                             prior_intercept = normal(0, 2000),\n                             iter = iter, warmup = warmup, chains = chains,\n                             adapt_delta = adapt_delta)\n))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 1 divergent transitions after warmup. See\nhttps://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup\nto find out why this is a problem and how to eliminate them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Examine the pairs() plot to diagnose sampling problems\n```\n\n\n:::\n\n```{.r .cell-code}\n# summary(dye_rstanarm)\neff_dye_rstanarm <- min(eff_size(dye_rstanarm)) / time_dye_rstanarm[[1]]\n```\n:::\n\n\n### rethinking\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <-  lme4::Dyestuff\n\ndat <- list(\n  Yield = d$Yield,\n  Batch = d$Batch\n)\n\ndye_flist <- alist(\n  Yield ~ dnorm(eta, sigma),\n  eta <- a + a_Batch[Batch],\n  a ~ dnorm(0,2000),\n  a_Batch[Batch] ~ dnorm(0, sd_Batch),\n  sigma ~ dcauchy(0, 50),\n  sd_Batch ~ dcauchy(0, 50))\n\ndye_rethinking <- ulam(dye_flist, \n                       data = dat, \n                       chains=1,\n                       cores = 4,\n                       sample = TRUE)\n\ntime_dye_rethinking <- system.time(capture.output(\n  dye_rethinking <- update(dye_rethinking,\n       iter = iter, \n       warmup = warmup, \n       chains = chains,\n       control = list(adapt_delta = adapt_delta))\n))\n\n\n# summary(dye_rethinking)\neff_dye_rethinking <- min(eff_size(dye_rethinking)) / time_dye_rethinking[[1]]\n```\n:::\n\n\n### MCMCglmm\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_dye_MCMCglmm <- system.time(capture.output(\n  dye_MCMCglmm <- MCMCglmm(Yield ~ 1, \n                           random = ~ Batch, data = lme4::Dyestuff, \n                           thin = thin, nitt = nitt, burnin = burnin)\n))\n# summary(dye_MCMCglmm)\neff_dye_MCMCglmm <- min(eff_size(dye_MCMCglmm)) / time_dye_MCMCglmm[[1]]\n```\n:::\n\n\n### Efficiency\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(c(brms = eff_dye_brms, \n        rstanarm = eff_dye_rstanarm, \n        rethinking = eff_dye_rethinking, \n        MCMCglmm = eff_dye_MCMCglmm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      brms   rstanarm rethinking   MCMCglmm \n 545.82485  151.78571 4120.30075   98.28571 \n```\n\n\n:::\n:::\n\n\n| brms      | rstanarm  | rethinking | MCMCglmm |\n|-----------|-----------|------------|----------|\n| 559.55398 | 202.97177 | 3660.71429 | 34.11514 |\n\n(to be continued...)\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}