{
  "hash": "011e10c856197735462f1e06d3c03516",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Yarn: hierarchical edge bundling visualization\"\nexcerpt: \"TidyTuesday 2022 Week 41\"\ndate: 2022-10-11\ndraft: false\nimages:\nseries:\ncategories:\nlayout: single\nexecute: \n  eval: false\n---\n\n\n\n\n\n\n\n## Overview\n\nThis post is all about **hierarchical edge bundling visualization**, the dataset comes from [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-10-11) 2022 week 41 **Ravelry data**.\n\nThe picture below is the result of the hierarchical edge bundling visualization.\n\n![](featured.png)\n\nFirst thing load the libraries and set the fonts:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\nfont_add_google(name=\"Pangolin\",family=\"pangolin\")\n```\n:::\n\n\n\n\n\nHelpful tip is how to set the **dpi** option inside the `showtext::showtext_opts` function. This sets the size of your text, and it can be very useful when used in conjunction with the same option inside the `ggsave` function. If `showtxet` dpi is of a certain value, then you should set the `ggsave` dpi lower than that value to balance the text size outcome in your final .png file.\n\nA perfect result comes from a nice balance trade-off between the **dpi** of the two functions.\n\nLet's have a look at the data, there are 100000 observation and 24 variables referring to the various types of yarns, companies, names, yardage, weights, textures, ratings, ...\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyarn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-11/yarn.csv')\n\nyarn%>%dim\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyarn%>%names\n```\n:::\n\n\n\n\n\nLet's select the names, the textures and the yardage for the length of the yarn, which is different from type to type.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  yarn %>%\n  select(yarn_weight_name,\n         texture_clean,\n         texture_clean,yardage)%>%\n  head()\n```\n:::\n\n\n\n\n\nAnd, tidy the `texture_clean` a bit more, grouping for most common texture names such as merino, acrylic, cotton, nylon, aran, cashmere, wool, silk, jersey,...and calculate the yardage average.\n\n<details>\n\nTidy data:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- yarn%>%\n  mutate(\n    texture_clean=case_when(str_detect(texture_clean,\n                                       \"merino\")~\"merino\",\n                            str_detect(texture_clean,\n                                            \"ply|plied|play|plies\")~\"ply\",\n                            str_detect(texture_clean,\n                                       \"acrylique|acrylic|polyacryl|acrilyc|acryt\")~\"acrylic\",\n                            str_detect(texture_clean,\"nylon\")~\"nylon\",\n                            str_detect(texture_clean,\"cotton\")~\"cotton\",\n                            str_detect(texture_clean,\"wool\")~\"wool\",\n                            str_detect(texture_clean,\"polyamide|polyamid\")~\"polyamid\",\n                            str_detect(texture_clean,\"angora\")~\"angora\",\n                            str_detect(texture_clean,\"cashmere\")~\"cashmere\",\n                            str_detect(texture_clean,\"aran\")~\"aran\",\n                            str_detect(texture_clean,\"silk\")~\"silk\",\n                            str_detect(texture_clean,\"jersey\")~\"jersey\",\n                            TRUE~texture_clean))%>%\n  filter(str_detect(texture_clean,\n                    c(\"merino|ply|acrylic|nylon|cotton|wool|angora|cashmere|aran|silk|jersey\")))%>%\n  count(texture_clean,yarn_weight_name,yardage,grams) %>%\n  mutate(yarn_weight_name=case_when(yarn_weight_name==\"Aran / Worsted\"~\"Aran\",\n                                    yarn_weight_name==\"DK / Sport\"~\"DK\",\n                                    yarn_weight_name==\"Light Fingering\"~\"Fingering\",\n                                    yarn_weight_name==\"Super Bulky\"~\"Bulky\",\n                                    TRUE~yarn_weight_name))%>%\n  filter(!yarn_weight_name==\"No weight specified\",!is.na(yarn_weight_name))%>%\n  filter(!is.na(yardage),!is.na(grams))%>%\n  select(-n)%>%\n  group_by(yarn_weight_name,texture_clean)%>%\n  summarise_all(.funs=mean)%>%\n  select(yarn_weight_name,texture_clean,yardage)\n```\n:::\n\n\n\n\n\n</details>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>%head\n```\n:::\n\n\n\n\n\n### Shape the data for making the hierarchical edge bundling visualization.\n\nNow, for setting the data ready for being used inside one of the `{ggraph}` functions, a new vector is created named **YARN**. This is done to have a central point to all the yarns' types.\n\nSo, what is needed is a dataframe with two columns **from** and **to**. Actually, what is needed are two dataframe **hierarchy** and **vertices**. As follow:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1<- df%>%\n  select(-texture_clean,-yardage)%>%\n  mutate(from = \"YARN\",.before=everything())%>%\n  rename(to = yarn_weight_name)\n  \nd2 <- df%>%\n  select(-yardage) %>%\n  rename(from = yarn_weight_name, \n         to = texture_clean)\n  \n\nhierarchy <- rbind(d1, d2)\nvertices <- data.frame(name = unique(c(as.character(hierarchy$from), \n                                       as.character(hierarchy$to))) ) \n```\n:::\n\n\n\n\n\nHierarchy:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhierarchy%>%head\n```\n:::\n\n\n\n\n\nVertices:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvertices%>%head\n```\n:::\n\n\n\n\n\nThen create the graph and the layout with `graph_from_data_frame()` function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmygraph <- graph_from_data_frame(hierarchy, vertices=vertices )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mygraph, layout = 'dendrogram', circular = F) + \n  geom_edge_diagonal()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mygraph, layout = 'dendrogram', circular = T) + \n  geom_edge_diagonal()+\n  geom_node_point(color=\"navy\",size=5)\n```\n:::\n\n\n\n\n\nI can even `filter` the leafs out to point just the main nodes:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mygraph, layout = 'dendrogram', circular = T) + \n  geom_edge_diagonal()+\n  geom_node_point(aes(filter=!leaf),\n                  color=\"navy\",\n                  size=5)\n```\n:::\n\n\n\n\n\nI like the circular type, and we can have a look at the inside calculation of the function with `create_layout()` specifying the type of layout as a **dendrogram**. It is a dataframe graph and it has the x, and y vectors, the leafs, and the names and other specifications.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- create_layout(mygraph, layout = 'dendrogram')\ndf1%>%class\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1%>%head()\n```\n:::\n\n\n\n\n\nTo add the labels to the leafs they would need to be oriented by a specific angle level, the reason for this is that the subgroups are not all the same.\n\nWhat is needed is a function for node angle adjustments and another similar function to adjust the horizontal distance of the text around the dendrogram. Likely the {ggraph} package provides a function for calculating the angles of your data:\n\n```         \n- node_angle(x,y)\n```\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnode_angle(df1$x,df1$y,degrees = T)%>%head()\n```\n:::\n\n\n\n\n\nThese values need to be adjusted:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnode_ang_adj <- function(x,y) {\n  ifelse(node_angle(x,y) > 90 & node_angle(x,y) < 270 , \n         node_angle(x,y) + 180, node_angle(x,y))\n  }\n\nnode_hjust_adj <- function(x,y) {\n  ifelse(node_angle(x,y) > 90 & node_angle(x,y) < 270 , 1,0)\n}\n```\n:::\n\n\n\n\n\nFinally, we can make the **hierarchical edge bundling visualization type circular dendrogram**:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mygraph, layout = 'dendrogram', circular = TRUE) + \n  geom_edge_diagonal(aes(color=factor(x)),\n                     alpha=0.9,\n                     show.legend = F) +\n  geom_node_point(aes(color=factor(x)),\n                  size=10,\n                  show.legend = F)+\n  geom_node_point(aes(color=factor(x)),\n                  size=10,\n                  shape=8,\n                  show.legend = F)+\n  geom_node_label(aes(filter=!leaf,label=name,color=factor(x)),\n                  label.padding = unit(0.1, \"lines\"),\n                  label.r = unit(0.1, \"lines\"),\n                  label.size = 0.1,\n                  family = \"pangolin\",\n                  fontface=\"bold\",\n                  show.legend = F,\n                  size=4, \n                  alpha=1)+\n  geom_node_text(aes(x = x*1.1, \n                     y=y*1.1, \n                     hjust = node_hjust_adj(x,y),\n                     angle=node_ang_adj(x,y),\n                     filter = leaf, \n                     label=name,\n                     color=factor(x)),\n                 family = \"pangolin\",\n                 fontface=\"bold\",\n                 show.legend = F,\n                 size=4, \n                 alpha=1)+\n  scale_color_manual(values = rep(RColorBrewer::brewer.pal(10,\"Paired\"),10))+\n  scale_x_discrete(expand = c(0,0.3))+\n  scale_y_discrete(expand = c(0,0.3))+\n  coord_fixed()+\n  labs(caption=\"What's inside your YARN?\\ntextures for each type\\n\\nDataSource: #TidyTuesday 2022 week41 Ravelry data\\nDataViz: Federica Gazzelloni (FG) Twitter: @fgazzelloni\\n\",\n       alt=\"Infographics\") +\n  theme_graph()+\n  theme(plot.margin = margin(5,5,5,5,unit = \"pt\"),\n        plot.caption = element_text(face=\"bold\",family=\"pangolin\"))\n```\n:::\n\n\n\n\n\nSave it with setting **dpi**:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"featured.png\",\n      dpi=280,\n      bg=\"white\",\n      width = 9,height = 9)\n```\n:::\n\n\n\n\n\n### Resources:\n\n-   [Hierarchical edge bundling](https://r-graph-gallery.com/hierarchical-edge-bundling.html)\n-   [ggplot extensions](https://exts.ggplot2.tidyverse.org/ggraph.html)\n-   [ggraph](https://ggraph.data-imaginist.com/)\n-   [tidygraph](https://tidygraph.data-imaginist.com/index.html)\n-   [igraph](https://igraph.org/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}