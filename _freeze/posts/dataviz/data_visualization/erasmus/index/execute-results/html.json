{
  "hash": "0bf6e6aaf250f24fab3147bf1be1dcda",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Erasmus students exchange\"\nexcerpt: \"TidyTuesday 2022 Week 10\"\ndate: 2022-03-15\ndraft: false\nimages:\nseries:\ncategories:\nlayout: single\nexecute: \n  eval: false\n---\n\n\n\n\n\n\n\n## Overview\n\nThis week 10 of #TidyTuesday 2022 theme is #Erasmus students exchange in the European countries.\n\nThe data set is from Erasmus student mobility, Data.Europa.eu and Wimdu.co to discover the most popular Erasmus destinations.\n\nThe idea is to make a network of sending and receiving countries, let's have a look at the data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(pacman)) install.packages(\"pacman\")\npacman::p_load(tidyverse, ggbump, cowplot, wesanderson)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nerasmus <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-08/erasmus.csv')\n```\n:::\n\n\n\n\n\nThe set is made of information about students, such as the age, the nationality, the lenght of stay, the gender, academic year, and others. I selected some of them, to extract the information I needed to make the network.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- erasmus%>%\n  select(sending_country_code,receiving_country_code,\n         participant_nationality,participants,\n         participant_age,\n         academic_year,mobility_duration,\n         participant_gender)\n\nkableExtra::kable(head(df)) \n```\n:::\n\n\n\n\n\nLooking at the `participant_age` we see that we have some misleading data:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% pull(participant_age) %>% summary()\n```\n:::\n\n\n\n\n\nFor this reason the best way is to filter students between 17 and 28 years old. Also, `mobility_duration` is quite surprising:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% pull(mobility_duration) %>% summary()\n```\n:::\n\n\n\n\n\nThe median value of the students' stay is ONE day, while the mean is just a little above TWO days. Very few students stay more than 10 days, but someone reaches a max of 273 days (39 weeks).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% count(mobility_duration) %>% mutate(perc = round(n/sum(n)*100,2)) %>% head()\ndf %>% count(mobility_duration) %>% mutate(perc = round(n/sum(n)*100,3)) %>% tail()\n```\n:::\n\n\n\n\n\n<!-- my comment -->\n\nStudent participants are almost all solo participants as the median shows to be ONE student per observation, TWO students on average, with a max value of 279. So that, to have a picture of the phenomenon select the average value of the student participants as representative.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% pull(participants) %>% summary(participants)\n```\n:::\n\n\n\n\n\nFinally, gender, Females are slightly more than males, just a little above 50%.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl <-df %>% pull(participant_gender) %>% table()\ncbind(n=tbl,pct=round(prop.table(tbl)*100,2))\n```\n:::\n\n\n\n\n\nThis is our new dataset on which we will build our network.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  group_by(academic_year) %>%\n  filter(between(x = participant_age,17,28),\n         mobility_duration>3) %>%\n  summarise(m_participants=mean(participants),\n            sending_country_code,receiving_country_code,\n            participant_gender,.groups=\"drop\") %>%\n  ungroup() %>%\n  select(-m_participants) %>%\n  distinct()\nkableExtra::kable(head(df))%>%\n  kableExtra::kable_styling(latex_options = \"scale_down\")\n```\n:::\n\n\n\n\n\nAt this point I'd like to have the full country's name, and use {ISOcodes} package. I do that because I'd like to make a spatial visualization as well. The package contains the values for the countries' abbreviations coded as \"Alpha_2\". I needed to adjust UK and Greece. To verify this you might need to use the `count()` function and the `str_detect()` a couple of times before identifying all the values that needs an adjustment.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ISOcodes)\nisocodes<-ISOcodes::ISO_3166_1\nisocodes2 <- isocodes%>%\n  mutate(Alpha_2=case_when(Alpha_2==\"GB\"~\"UK\",\n                           Alpha_2==\"GR\"~\"EL\",\n                           TRUE ~ Alpha_2))\n```\n:::\n\n\n\n\n\nSome more manipulations for selecting just the countries in the dataset.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsending_country_code <- df %>% count(sending_country_code) %>% select(-n) %>% unlist()\nreceiving_country_code <- df %>% count(receiving_country_code) %>% select(-n) %>% unlist()\n\nsending <- isocodes2 %>% filter(Alpha_2 %in% sending_country_code)\nreceiving <- isocodes2 %>% filter(Alpha_2 %in% receiving_country_code)\n\nsending_unlst <- sending %>% count(Name) %>% select(-n) %>% unlist()\nreceiving_unlst <- receiving %>% count(Name) %>% select(-n) %>% unlist()\n```\n:::\n\n\n\n\n\n{ggplot2} package provides spatial data, as you might notice, students of the Erasmus programs come from all over the World. Still, some countries' name adjustments are needed.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- map_data(\"world\")%>%\n  filter(!region==\"Antarctica\")%>%\n  mutate(region=case_when(region==\"UK\"~ \"United Kingdom\",\n                          region==\"Czech Republic\"~\"Czechia\",\n                          region==\"Moldova\"~\"Moldova, Republic of\",\n                          region==\"Palestine\"~\"Palestine, State of\",\n                          region==\"Russia\" ~ \"Russian Federation\",\n                          TRUE ~ region))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsending_geo <- world %>% filter(region %in% sending_unlst)\n\nsending_geo_full <- sending %>%\n  select(Alpha_2,Name) %>%\n  left_join(sending_geo,by = c(\"Name\"=\"region\"))\n\n\nreceiving_geo <- world %>% filter(region %in% receiving_unlst)\n\nreceiving_geo_full <- receiving %>%\n  select(Alpha_2,Name) %>%\n  left_join(receiving_geo,by = c(\"Name\"=\"region\"))\n```\n:::\n\n\n\n\n\nThen finally, make the centroids. We will use this in the visualization further below.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsending_geo_centroids <- sending_geo_full %>%\n  group_by(Name) %>%\n  mutate(avg_long = mean(range(long)),avg_lat = mean(range(lat))) %>%\n  count(Alpha_2,Name,avg_long,avg_lat)\n\nreceiving_geo_centroids <- receiving_geo_full %>%\n  group_by(Name) %>%\n  mutate(avg_long = mean(range(long)),avg_lat = mean(range(lat))) %>%\n  count(Alpha_2,Name,avg_long,avg_lat)\n```\n:::\n\n\n\n\n\ndf2 is our new data set, made of countries' names and spatials:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- df %>%\n  left_join(sending_geo_centroids,by=c(\"sending_country_code\"=\"Alpha_2\")) %>%\n  left_join(receiving_geo_centroids,by=c(\"receiving_country_code\"=\"Alpha_2\")) %>%\n  rename(sending_country_name=Name.x,receiving_country_name=Name.y,\n         avg_long_s=avg_long.x,avg_lat_s=avg_lat.x,\n         avg_long_r=avg_long.y,avg_lat_r=avg_lat.y)%>%\n  select(-n.x,-n.y)\ndf2 %>% head\n```\n:::\n\n\n\n\n\norder_sending and order_receiving will be very useful for a third visualization in which all the sending countries will be matched with students' destinations. We will see this further below.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_sending <- df2%>%\n  count(sending_country_name,sort=TRUE)%>%\n  mutate(index_sending=seq(1,length(sending_country_name),1),\n         index_sending=rev(index_sending))%>%\n  drop_na()\n\norder_receiving <- df2%>%\n  count(receiving_country_name,sort=TRUE)%>%\n  mutate(index_receiving=seq(1,length(receiving_country_name),1),\n         index_receiving=rev(index_receiving))%>%\n  drop_na()\n```\n:::\n\n\n\n\n\nAnd here is the data set that we will use to make the rank network:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerasmus_network <- df2 %>%\n  select(academic_year,\n         sending_country_name,receiving_country_name) %>%\n  distinct() %>%\n  left_join(order_sending,by=\"sending_country_name\") %>%\n  left_join(order_receiving,by=\"receiving_country_name\") %>%\n  mutate(group = glue::glue(\"{sending_country_name}-{receiving_country_name}\")) %>%\n  distinct() %>%\n  drop_na() %>%\n  arrange(index_sending) %>%\n  mutate(year_id=case_when(academic_year==\"2014-2015\"~1,\n                           academic_year==\"2015-2016\"~2,\n                           academic_year==\"2016-2017\"~3,\n                           academic_year==\"2017-2018\"~4,\n                           academic_year==\"2018-2019\"~5,\n                           academic_year==\"2019-2020\"~6)) %>%\n  relocate(year_id) %>%\n  arrange(year_id)\n\nerasmus_network %>% head\n```\n:::\n\n\n\n\n\nLoad the packages for setting a nice font.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(showtext)\nlibrary(sysfonts)\nlibrary(extrafont)\n\nshowtext::showtext_auto()\nshowtext::showtext_opts(dpi=320)\n\nfont_add_google(name=\"Noto Sans\",family=\"notosans\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nerasmus_network%>%\n  arrange(index_sending)%>%\n  ggplot()+\n  \n  geom_text(aes(x = -2, y = index_sending+5, label = sending_country_name), \n            vjust=0, \n            hjust=\"left\", color = \"darkred\", size = 3) +\n  \n  ggbump::geom_sigmoid(aes(x = -2, xend = 16.1, \n                           y = index_sending+5, yend =index_receiving+18, \n                           group=factor(group),color=receiving_country_name), \n                       alpha = .6, smooth = 10, size = 0.1,show.legend = F) +\n  \n  geom_text(aes(x = 16, y = index_receiving+17.5, label = receiving_country_name), \n            vjust=-1.5, hjust=\"right\", color = \"darkred\", size = 3) +\n  coord_cartesian()+\n  theme_void()\n```\n:::\n\n\n\n\n\nOr a simplified version:\n\n![network](images/er-network.png)\n\nLet's select Top 5 sending countries:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerasmus_network2 <- erasmus_network %>%\n  filter(sending_country_name%in%c(\"Italy\",\n                                   \"Germany\",\n                                   \"United Kingdom\",\n                                   \"Romania\",\"Spain\")) %>%\n  mutate(sending_country_name=case_when(sending_country_name==\"United Kingdom\"~\"UK\",\n                                        TRUE~sending_country_name))%>%\n  count(year_id,academic_year,sending_country_name) %>%\n  group_by(academic_year)%>%\n  mutate(rank=rank(x=n))%>%\n  ungroup()\n\nerasmus_network2 %>% head()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n\nggplot(erasmus_network2,\n       mapping=aes(academic_year,rank,\n                   group=factor(sending_country_name),\n                   color=factor(sending_country_name)))+ \n  geom_point(size = 7) +\n  geom_text(data = erasmus_network2 %>% filter(year_id == min(year_id)),\n            aes(x = year_id - .1, \n                label = sending_country_name), size = 4, hjust = 1) +\n  geom_text(data = erasmus_network2 %>% \n              filter(year_id == max(year_id)),\n            aes(x = year_id + .1, label = sending_country_name), \n            size = 4, hjust = 0,check_overlap = T) +\n  geom_bump(size = 2, smooth = 8) +\n  labs(y = \"RANK\",\n       x = \"Academic Year\",\n       title=\"Erasmus Top 5 student exchange countries\",\n       subtitle=\"Ranks of the highest sending frequency\",\n       caption=\"DataSource: Erasmus student mobility | Data.Europa.eu | Wimdu.co\\nDataViz: Federica Gazzelloni | #TidyTuesday Week 10 Erasmus\") +\n  scale_y_reverse() +\n  scale_color_manual(values = wesanderson::wes_palette(5, name = \"Royal2\"))+\n  cowplot::theme_minimal_grid(font_size = 14, line_size = 0) +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        plot.title = element_text(color=\"#ffc7ba\"),\n        plot.subtitle = element_text(color=\"#ffc7ba\"),\n        plot.caption = element_text(color=\"#ffc7ba\",size=8),\n        axis.text = element_text(color=\"#ffc7ba\"),\n        axis.title = element_text(color=\"#ffc7ba\"),\n        plot.background = element_rect(color=\"black\",fill=\"black\"),\n        panel.background = element_rect(color=\"black\",fill=\"black\"))\n```\n:::\n\n\n\n\n\nHere is the final part of this post, I set the spatials for making a map visualizaton of the sending to receiving countries.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsending_geo_full2<-sending_geo_full%>%mutate(direction=\"sending\")\nreceiving_geo_full2<-receiving_geo_full%>%mutate(direction=\"receiving\")\n\ngeo_full <-rbind(sending_geo_full2,receiving_geo_full2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncentr_s<- sending_geo_centroids%>%mutate(direction=\"Sending\")\ncentr_r<- receiving_geo_centroids%>%mutate(direction=\"Receiving\")\ncentroids<-rbind(centr_s,centr_r)%>%\n  mutate(direction=as.factor(direction))\n  \nlevels(centroids$direction)<-c(\"Sending\",\"Receiving\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo_full2<- geo_full%>%\n  mutate(direction=as.factor(direction))\n\nlevels(geo_full2$direction)<-c(\"Receiving\",\"Sending\")\n\ngeo_full2$direction<-relevel(geo_full2$direction,ref=\"Sending\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(geo_full2)+\n  geom_polygon(data = world,\n               aes(x=long,y=lat,group=group),fill=\"grey78\",color=\"grey5\")+\n  \n  geom_polygon(aes(x=long,y=lat,group=group,fill=direction),alpha=0.3)+\n  \n  geom_point(data=centroids,\n             aes(x=avg_long, y=avg_lat,color=direction,shape=direction))+\n \n  coord_map(\"ortho\", orientation = c(33.366449, 24.022840, 0))+\n  facet_wrap(vars(direction))+\n  scale_x_continuous(\"Latitude\", expand=c(0,0)) +\n  scale_y_continuous(\"Longitude\", expand=c(0,0)) +\n  theme_void()+\n  theme(legend.position = \"none\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}